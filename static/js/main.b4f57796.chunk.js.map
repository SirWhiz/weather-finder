{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","Form","className","onSubmit","getWeather","type","name","placeholder","Weather","flagUrl","country","src","alt","city","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","cod","setState","capitalizedDescription","weather","charAt","toUpperCase","slice","main","temp","sys","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAaeA,EAXA,SAACC,GAEZ,OACI,6BACI,8CACA,6ECSGC,EAdF,SAACD,GAEV,OACI,yBAAKE,UAAU,aACX,0BAAMC,SAAUH,EAAMI,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,WAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,cAC9C,kDCSDC,EAhBC,SAACR,GAEb,IAAIS,EAAO,sCAAkCT,EAAMU,QAAxC,gBAEX,OACI,yBAAKR,UAAU,gBACTF,EAAMU,SAAW,yBAAKR,UAAU,kBAAiB,yBAAKS,IAAKF,EAASG,IAAI,eACxEZ,EAAMa,MAAQb,EAAMU,SAAW,uBAAGR,UAAU,YAAaF,EAAMa,KAAhC,KAA0Cb,EAAMU,SAC/EV,EAAMc,aAAe,2CAAkBd,EAAMc,YAAxB,KACrBd,EAAMe,UAAY,wCAAef,EAAMe,SAArB,KAClBf,EAAMgB,aAAe,2BAAKhB,EAAMgB,YAAX,kBACrBhB,EAAMiB,OAAS,uBAAGf,UAAU,UAAWF,EAAMiB,SCPrDC,EAAU,mCAsFDC,E,2MAlFbC,MAAQ,CACNN,iBAAaO,EACbR,UAAMQ,EACNX,aAASW,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTjB,W,uCAAa,WAAOkB,GAAP,uBAAAC,EAAA,6DACXD,EAAEE,iBACIX,EAAOS,EAAEG,OAAOC,SAASb,KAAKc,MAC9BjB,EAAUY,EAAEG,OAAOC,SAAShB,QAAQiB,MAH/B,SAKYC,MAAM,oDAAD,OAAqDf,EAArD,YAA6DH,EAA7D,kBAA8EQ,EAA9E,kBALjB,cAKLW,EALK,gBAMQA,EAASC,OANjB,OAMLC,EANK,OAQRlB,GAAQH,EACO,QAAbqB,EAAKC,IACN,EAAKC,SAAS,CACZnB,iBAAaO,EACbR,UAAMQ,EACNX,aAASW,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,6EAGLiB,EAAyBH,EAAKI,QAAQ,GAAGnB,YAAYoB,OAAO,GAAGC,cAAgBN,EAAKI,QAAQ,GAAGnB,YAAYsB,MAAM,GACrH,EAAKL,SAAS,CACZnB,YAAaiB,EAAKQ,KAAKC,KACvB3B,KAAMkB,EAAKzB,KACXI,QAASqB,EAAKU,IAAI/B,QAClBK,SAAUgB,EAAKQ,KAAKxB,SACpBC,YAAakB,EACbjB,MAAO,MAIX,EAAKgB,SAAS,CACZnB,iBAAaO,EACbR,UAAMQ,EACNX,aAASW,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,2BApCA,4C,8HA2CX,OACE,yBAAKf,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,QACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAME,WAAYsC,KAAKtC,aACvB,yBAAKF,UAAU,WACb,kBAAC,EAAD,CACEY,YAAa4B,KAAKtB,MAAMN,YACxBD,KAAM6B,KAAKtB,MAAMP,KACjBH,QAASgC,KAAKtB,MAAMV,QACpBK,SAAU2B,KAAKtB,MAAML,SACrBC,YAAa0B,KAAKtB,MAAMJ,YACxBC,MAAOyB,KAAKtB,MAAMH,iB,GAxElB0B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b4f57796.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = (props) => {\r\n\r\n    return(\r\n        <div>\r\n            <h1>Weather Finder</h1>\r\n            <p>Find out temperature, conditions and more...</p>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n\r\n    return(\r\n        <div className=\"base-form\">\r\n            <form onSubmit={props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City..\"></input>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country..\"></input>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n\r\n    var flagUrl = `https://www.countryflags.io/${props.country}/flat/64.png`;\r\n\r\n    return(\r\n        <div className=\"base-results\">\r\n            { props.country && <div className=\"icon-container\"><img src={flagUrl} alt=\"flag icon\"></img></div> }\r\n            { props.city && props.country && <p className=\"cityName\">{ props.city }, { props.country }</p> }\r\n            { props.temperature && <p>Temperature: { props.temperature }C</p> }\r\n            { props.humidity && <p>Humidity: { props.humidity }%</p> }\r\n            { props.description && <p>{ props.description } at the moment</p> }\r\n            { props.error && <p className=\"errors\">{ props.error }</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\n\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"84bbec1fd3edc563ed8114ba5fbd2eb8\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n\n    if(city && country) {\n      if(data.cod === \"404\"){\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"We could not find the given city in the given country, please try again\"\n        });\n      }else{\n        var capitalizedDescription = data.weather[0].description.charAt(0).toUpperCase() + data.weather[0].description.slice(1);\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: capitalizedDescription,\n          error: \"\"\n        });\n      }\n    }else{\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please fill the values\"\n      });\n    }\n\n  }\n  \n  render(){\n    return(\n      <div className=\"base\">\n        <div className=\"container\">\n          <div className=\"titles\">\n            <div className=\"title-container\">\n              <Titles/>\n            </div>\n          </div>\n          <div className=\"form\">\n            <div className=\"form-container\">\n              <Form getWeather={this.getWeather} />\n              <div className=\"results\">\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}